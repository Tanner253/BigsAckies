<div class="container mx-auto mt-8 px-4">
  <h1 class="text-3xl font-bold mb-6">Confirm Payment</h1>

  <!-- Display messages -->
  <% if (messages.error) { %>
    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
      <strong class="font-bold">Error!</strong>
      <span class="block sm:inline"><%= messages.error %></span>
    </div>
  <% } %>
  <% if (messages.warning) { %>
    <div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded relative mb-4" role="alert">
      <strong class="font-bold">Warning!</strong>
      <span class="block sm:inline"><%= messages.warning %></span>
    </div>
  <% } %>
  <% if (messages.success) { %>
    <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4" role="alert">
      <strong class="font-bold">Success!</strong>
      <span class="block sm:inline"><%= messages.success %></span>
    </div>
  <% } %>

  <% if (cart.items.length === 0) { %>
    <div class="text-center py-10">
        <p class="text-gray-600 text-lg">Your cart is empty.</p>
        <a href="/products" class="mt-4 inline-block bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition duration-300 ease-in-out">Go Shopping</a>
    </div>
  <% } else { %>
    <form id="payment-form" class="flex flex-col lg:flex-row lg:space-x-8">

      <!-- Left Column: Address & Payment Details -->
      <div class="lg:w-2/3">

        <!-- Address Selection -->
        <div class="bg-white shadow-md rounded-lg p-6 mb-6">
          <h2 class="text-xl font-semibold mb-4">Shipping Address</h2>
          <% if (addresses && addresses.length > 0) { %>
            <div class="space-y-4">
              <% addresses.forEach((addr, index) => { %>
                <label class="block border rounded p-4 cursor-pointer hover:bg-gray-50">
                  <div class="flex items-center justify-between">
                    <div>
                      <input type="radio" name="shipping_address_id" value="<%= addr.id %>" class="mr-2" <%= addr.is_default || index === 0 ? 'checked' : '' %> required>
                      <span class="font-medium"><%= addr.name ? addr.name + ':' : '' %> <%= addr.street %></span>
                      <span class="block text-sm text-gray-600"><%= addr.city %>, <%= addr.state %> <%= addr.zip_code %>, <%= addr.country %></span>
                    </div>
                    <% if (addr.is_default) { %>
                      <span class="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full">Default</span>
                    <% } %>
                  </div>
                </label>
              <% }) %>
            </div>
            <div class="mt-4">
              <a href="/account/addresses" class="text-sm text-blue-600 hover:underline">Manage Addresses</a>
              <!-- TODO: Add 'Add New Address' functionality here or link -->
            </div>
          <% } else { %>
            <p class="text-gray-600 mb-2">No saved addresses found.</p>
            <a href="/account/addresses/add" class="btn-secondary text-sm">Add New Address</a>
            <!-- Or display an address form directly -->
          <% } %>
        </div>

        <!-- Collapsible Item Summary -->
        <details class="bg-white shadow-md rounded-lg mb-6">
          <summary class="cursor-pointer p-4 text-lg font-medium text-gray-700 hover:bg-gray-50 rounded-t-lg">
            Review Items (<%= cart.totalQty %>)
          </summary>
          <div class="border-t">
            <ul class="divide-y divide-gray-200 p-4">
              <% cart.items.forEach(item => { %>
                <li class="py-2 flex items-center space-x-4">
                  <% if (item.image_url) { %>
                    <div class="flex-shrink-0 w-12 h-12">
                      <img class="w-full h-full rounded object-cover" src="<%= item.image_url %>" alt="<%= item.name %>">
                    </div>
                  <% } else { %>
                    <div class="flex-shrink-0 w-12 h-12 bg-gray-200 rounded flex items-center justify-center">
                      <i class="fas fa-image text-gray-400 text-xl"></i>
                    </div>
                  <% } %>
                  <div class="flex-grow">
                    <p class="text-sm font-medium text-gray-900"><%= item.name %></p>
                    <p class="text-xs text-gray-500">Qty: <%= item.quantity %></p>
                  </div>
                  <div class="text-right">
                    <p class="text-sm font-semibold text-gray-900">$<%= (item.price * item.quantity).toFixed(2) %></p>
                  </div>
                </li>
              <% }) %>
            </ul>
          </div>
        </details>

        <!-- Stripe Payment Element -->
        <div class="bg-white shadow-md rounded-lg p-6">
            <h2 class="text-xl font-semibold mb-4">Payment Details</h2>
            <div id="payment-element"></div>
            <div id="payment-message" class="text-red-500 text-sm mt-2 hidden"></div>
        </div>

      </div>

      <!-- Right Column: Order Summary -->
      <div class="lg:w-1/3 mt-8 lg:mt-0">
        <div class="bg-white shadow-md rounded-lg p-6 sticky top-6">
          <h2 class="text-xl font-semibold mb-4 border-b pb-2">Order Summary</h2>
          <div class="space-y-3 mb-6">
            <div class="flex justify-between">
              <span class="text-gray-600">Subtotal</span>
              <span class="text-gray-900">$<%= cart.totalPrice.toFixed(2) %></span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600">Shipping</span>
              <span class="text-green-600">Free</span> <!-- Assuming free shipping -->
            </div>
            <!-- Add taxes here if applicable -->
          </div>
          <div class="border-t pt-4">
            <div class="flex justify-between font-bold text-lg">
              <span>Total</span>
              <span>$<%= cart.totalPrice.toFixed(2) %></span> <!-- Add taxes to total if applicable -->
            </div>
          </div>

          <!-- Payment Button -->
          <div class="mt-6">
            <button id="submit-button" class="w-full bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-4 rounded-lg transition duration-300 ease-in-out focus:outline-none focus:shadow-outline disabled:opacity-50 disabled:cursor-not-allowed">
              <span id="button-text">Make Payment</span>
              <span id="spinner" class="hidden"><!-- Add spinner SVG or icon here --> Processing...</span>
            </button>
          </div>
        </div>
      </div>

    </form> <!-- End flex container / form -->
  <% } %>
</div>

<!-- Include Stripe.js -->
<script src="https://js.stripe.com/v3/"></script>

<!-- New Script for Payment Intents -->
<script>
document.addEventListener('DOMContentLoaded', async () => {
  const stripePublishableKey = '<%= stripePublishableKey %>';
  if (!stripePublishableKey) {
    console.error('Stripe publishable key is missing!');
    // Display error to user
    document.getElementById('payment-message').textContent = 'Payment configuration error. Please contact support.';
    document.getElementById('payment-message').classList.remove('hidden');
    return;
  }

  const stripe = Stripe(stripePublishableKey);

  let elements;

  // Fetch client secret and initialize Elements
  initialize();

  // Attach listener to form submission
  document.querySelector("#payment-form").addEventListener("submit", handleSubmit);

  // Fetches a payment intent and captures the client secret
  async function initialize() {
    try {
        const response = await fetch("/checkout/create-payment-intent", {
            method: "POST",
            headers: {
                // Add CSRF token if needed for POST requests
                // 'CSRF-Token': csrfToken
            }
        });

        if (!response.ok) {
            let errorMsg = `Failed to initialize payment (HTTP ${response.status})`;
            try {
                // Check content type before parsing JSON
                const contentType = response.headers.get("content-type");
                if (contentType && contentType.includes("application/json")) {
                    const errorData = await response.json();
                    errorMsg = errorData.error || errorMsg;
                } else {
                    // Get text for non-JSON errors
                    const textError = await response.text();
                    console.error("Non-JSON error response:", textError); 
                    errorMsg = textError || errorMsg;
                }
            } catch (parseError) {
                console.error("Error parsing error response:", parseError);
            }
            throw new Error(errorMsg);
        }

        const { clientSecret } = await response.json();

        const appearance = {
            theme: 'stripe',
            // Add other appearance options if desired
        };
        elements = stripe.elements({ appearance, clientSecret });

        const paymentElementOptions = {
            layout: "tabs", // or 'accordion'
        };
        const paymentElement = elements.create("payment", paymentElementOptions);
        paymentElement.mount("#payment-element");

    } catch (error) {
        console.error('Error initializing Stripe Elements:', error);
        showMessage('Could not initialize payment form. ' + error.message);
    }
  }

  async function handleSubmit(e) {
    e.preventDefault();
    setLoading(true);

    // Ensure Elements is initialized
    if (!elements) {
        showMessage("Payment elements not loaded yet.");
        setLoading(false);
        return;
    }

    // Check if an address is selected
    const selectedAddress = document.querySelector('input[name="shipping_address_id"]:checked');
    if (!selectedAddress) {
        showMessage("Please select a shipping address.");
        setLoading(false);
        return;
    }
    // TODO: You might want to pass selected address details to confirmPayment if needed
    // const addressId = selectedAddress.value;

    // Trigger form validation and wallet collection
    const { error: submitError } = await elements.submit();
    if (submitError) {
      showMessage(submitError.message);
      setLoading(false);
      return;
    }

    // Confirm the payment on the server using the client secret
    const { error } = await stripe.confirmPayment({
      elements,
      confirmParams: {
        // Make sure to change this to your payment completion page
        return_url: `${window.location.origin}/checkout/order/processing`, // Will create this route later
        // Pass shipping information if required by your setup/region
        // shipping: { /* ... */ }
      },
    });

    // This point will only be reached if there is an immediate error when
    // confirming the payment. Otherwise, your customer will be redirected to
    // your `return_url`. For some payment methods like iDEAL, your customer will
    // be redirected to an intermediate site first to authorize the payment, then
    // redirected to the `return_url`.
    if (error) { // Check for error type (card_error, validation_error, etc.)
        if (error.type === "card_error" || error.type === "validation_error") {
            showMessage(error.message);
        } else {
            showMessage("An unexpected error occurred during payment.");
            console.error("Stripe confirmPayment error:", error);
        }
    }

    setLoading(false);
  }

  // ------- UI helpers --------
  function showMessage(messageText) {
    const messageContainer = document.querySelector("#payment-message");
    messageContainer.classList.remove("hidden");
    messageContainer.textContent = messageText;

    setTimeout(function () {
      messageContainer.classList.add("hidden");
      messageContainer.textContent = "";
    }, 5000); // Hide after 5 seconds
  }

  // Show a spinner on payment submission
  function setLoading(isLoading) {
    const submitButton = document.querySelector("#submit-button");
    const spinner = document.querySelector("#spinner");
    const buttonText = document.querySelector("#button-text");

    if (isLoading) {
      // Disable the button and show a spinner
      submitButton.disabled = true;
      spinner.classList.remove("hidden");
      buttonText.classList.add("hidden");
    } else {
      submitButton.disabled = false;
      spinner.classList.add("hidden");
      buttonText.classList.remove("hidden");
    }
  }
});
</script> 