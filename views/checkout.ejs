<div class="container mx-auto px-4 py-8">
  <h1 class="text-3xl font-bold mb-8">Checkout</h1>
  
  <%# Display General Errors %>
  <% if (messages && messages.error) { %>
    <div class="mb-6 p-4 bg-red-100 text-red-700 rounded-md border border-red-200">
      <%= messages.error %>
    </div>
  <% } %>

  <form id="checkout-form" action="/checkout" method="POST" class="lg:flex lg:gap-8">
    <input type="hidden" name="_csrf" value="<%= locals.csrfToken %>">

    <%# Left Column: Shipping and Payment Details %>
    <div class="lg:w-2/3 space-y-6">

      <%# --- Shipping Information Section --- %>
      <div x-data="{ 
          selectedOption: '<%= addresses && addresses.length > 0 ? "saved" : "new" %>',
          selectedAddressId: '<%= addresses && addresses.find(a => a.is_default) ? addresses.find(a => a.is_default).id : (addresses && addresses.length > 0 ? addresses[0].id : "") %>',
          isNewAddressOpen: <%= !(addresses && addresses.length > 0) %> 
        }" 
         class="bg-white rounded-lg shadow-md p-6">
        
        <h2 class="text-xl font-semibold mb-4 border-b pb-3">Shipping Information</h2>
        
        <input type="hidden" name="shipping_option" x-model="selectedOption"> 

        <%# Saved Addresses (if any) %>
        <% if (addresses && addresses.length > 0) { %>
          <div class="mb-4">
             <label class="flex items-center cursor-pointer">
               <input type="radio" name="_shipping_option_selector" value="saved" 
                      x-model="selectedOption" @change="isNewAddressOpen = false" class="form-radio h-5 w-5 text-green-600">
               <span class="ml-2 text-gray-700 font-medium">Use a Saved Address</span>
             </label>
          </div>

          <div x-show="selectedOption === 'saved'" x-transition class="space-y-3 pl-8 mb-4">
            <% addresses.forEach(address => { %>
              <label 
                class="flex items-start p-4 border rounded-md cursor-pointer transition duration-150 ease-in-out"
                :class="{ 'border-green-500 bg-green-50': selectedAddressId == '<%= address.id %>', 'border-gray-300': selectedAddressId != '<%= address.id %>' }"
              >
                <input type="radio" name="selected_address_id" value="<%= address.id %>" x-model="selectedAddressId" class="form-radio h-4 w-4 text-green-600 mt-1 mr-3 flex-shrink-0">
                <div>
                  <div class="flex justify-between items-center mb-1">
                    <span class="font-medium text-gray-800"><%= address.name %></span>
                    <% if(address.is_default) { %><span class="text-xs bg-gray-200 text-gray-700 px-2 py-0.5 rounded-full">Default</span><% } %>
                  </div>
                  <p class="text-sm text-gray-600"><%= address.street %></p>
                  <p class="text-sm text-gray-600"><%= address.city %>, <%= address.state %> <%= address.zip_code %></p>
                  <p class="text-sm text-gray-600"><%= address.country %></p>
                  <% if(address.phone) { %><p class="text-sm text-gray-600 mt-1">Phone: <%= address.phone %></p><% } %>
                </div>
              </label>
            <% }) %>
            <%# Display validation error for saved address selection %>
            <% if (locals.formErrors && formErrors.selected_address_id) { %>
              <p class="text-sm text-red-600 mt-1"><%= formErrors.selected_address_id.msg %></p>
            <% } %>
          </div>
        <% } %>

        <%# Add New Address Option %>
        <div class="mb-4 <%= addresses && addresses.length > 0 ? '' : 'hidden' %>"> <%# Hide radio if no saved addresses %>
           <label class="flex items-center cursor-pointer">
             <input type="radio" name="_shipping_option_selector" value="new" 
                    x-model="selectedOption" @change="isNewAddressOpen = true" class="form-radio h-5 w-5 text-green-600">
             <span class="ml-2 text-gray-700 font-medium">Add a New Address</span>
           </label>
        </div>

        <%# New Address Form (collapsible) %>
        <div x-show="isNewAddressOpen" x-transition 
             class="<%= addresses && addresses.length > 0 ? 'pl-8' : '' %> space-y-4 border-t border-gray-200 pt-4 mt-4">
          
          <h3 class="text-md font-medium text-gray-800 mb-3">New Shipping Address Details</h3>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Full Name*</label>
              <input type="text" id="name" name="name" value="<%= locals.oldInput && oldInput.name ? oldInput.name : '' %>" 
                     class="w-full px-3 py-2 border rounded-md focus:ring-green-500 focus:border-green-500 <%= locals.formErrors && formErrors.name ? 'border-red-500' : 'border-gray-300' %>">
              <% if (locals.formErrors && formErrors.name) { %><p class="text-sm text-red-600 mt-1"><%= formErrors.name.msg %></p><% } %>
            </div>
             <div>
              <label for="phone" class="block text-sm font-medium text-gray-700 mb-1">Phone Number</label>
              <input type="tel" id="phone" name="phone" value="<%= locals.oldInput && oldInput.phone ? oldInput.phone : '' %>" 
                     class="w-full px-3 py-2 border rounded-md focus:ring-green-500 focus:border-green-500 border-gray-300">
            </div>
          </div>

          <div>
            <label for="street" class="block text-sm font-medium text-gray-700 mb-1">Street Address*</label>
            <input type="text" id="street" name="street" value="<%= locals.oldInput && oldInput.street ? oldInput.street : '' %>" 
                   class="w-full px-3 py-2 border rounded-md focus:ring-green-500 focus:border-green-500 <%= locals.formErrors && formErrors.street ? 'border-red-500' : 'border-gray-300' %>">
             <% if (locals.formErrors && formErrors.street) { %><p class="text-sm text-red-600 mt-1"><%= formErrors.street.msg %></p><% } %>
         </div>

          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <label for="city" class="block text-sm font-medium text-gray-700 mb-1">City*</label>
              <input type="text" id="city" name="city" value="<%= locals.oldInput && oldInput.city ? oldInput.city : '' %>" 
                     class="w-full px-3 py-2 border rounded-md focus:ring-green-500 focus:border-green-500 <%= locals.formErrors && formErrors.city ? 'border-red-500' : 'border-gray-300' %>">
              <% if (locals.formErrors && formErrors.city) { %><p class="text-sm text-red-600 mt-1"><%= formErrors.city.msg %></p><% } %>
            </div>
            <div>
              <label for="state" class="block text-sm font-medium text-gray-700 mb-1">State/Province*</label>
              <input type="text" id="state" name="state" value="<%= locals.oldInput && oldInput.state ? oldInput.state : '' %>" 
                     class="w-full px-3 py-2 border rounded-md focus:ring-green-500 focus:border-green-500 <%= locals.formErrors && formErrors.state ? 'border-red-500' : 'border-gray-300' %>">
               <% if (locals.formErrors && formErrors.state) { %><p class="text-sm text-red-600 mt-1"><%= formErrors.state.msg %></p><% } %>
           </div>
            <div>
              <label for="zip_code" class="block text-sm font-medium text-gray-700 mb-1">ZIP/Postal Code*</label>
              <input type="text" id="zip_code" name="zip_code" value="<%= locals.oldInput && oldInput.zip_code ? oldInput.zip_code : '' %>" 
                     class="w-full px-3 py-2 border rounded-md focus:ring-green-500 focus:border-green-500 <%= locals.formErrors && formErrors.zip_code ? 'border-red-500' : 'border-gray-300' %>">
              <% if (locals.formErrors && formErrors.zip_code) { %><p class="text-sm text-red-600 mt-1"><%= formErrors.zip_code.msg %></p><% } %>
            </div>
          </div>
          <div>
            <label for="country" class="block text-sm font-medium text-gray-700 mb-1">Country*</label>
            <input type="text" id="country" name="country" value="<%= locals.oldInput && oldInput.country ? oldInput.country : 'USA' %>" 
                   class="w-full px-3 py-2 border rounded-md focus:ring-green-500 focus:border-green-500 <%= locals.formErrors && formErrors.country ? 'border-red-500' : 'border-gray-300' %>">
            <% if (locals.formErrors && formErrors.country) { %><p class="text-sm text-red-600 mt-1"><%= formErrors.country.msg %></p><% } %>
          </div>
        </div>
      </div>

      <%# --- Payment Information Section Start (Replaced) --- %>
      <div class="bg-white rounded-lg shadow-md p-6">
        <h2 class="text-xl font-semibold mb-4">Payment Information</h2>
        <%# Structure based on stripe-test.ejs, loading div removed %>
        <div id="payment-element" class="p-4 border border-gray-300 rounded-md shadow-sm min-h-[220px] relative">
          <!-- Stripe Elements will be inserted here by the script -->
        </div>
        <div id="payment-message" class="mt-2 text-sm text-red-600 hidden"></div>
      </div>
      <%# --- Payment Information Section End (Replaced) --- %>

      <%# --- Order Notes Section --- %>
      <div class="bg-white rounded-lg shadow-md p-6">
         <h2 class="text-xl font-semibold mb-4">Order Notes <span class="text-gray-500 font-normal">(optional)</span></h2>
         <textarea name="order_notes" id="order_notes" rows="3" placeholder="Add any special instructions for your order..."
                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-green-500 focus:border-green-500"></textarea>
      </div>

    </div>

    <%# Right Column: Order Summary %>
    <div class="lg:w-1/3 mt-8 lg:mt-0">
      <div class="bg-white rounded-lg shadow-md p-6 sticky top-8"> 
        <h2 class="text-xl font-semibold mb-4 border-b pb-3">Order Summary</h2>
        
        <div class="space-y-4 mb-6">
          <% cart.items.forEach(item => { %>
            <div class="flex items-center space-x-4">
              <img src="<%= item.image_url || '/images/placeholder.png' %>" alt="<%= item.name %>" class="w-16 h-16 object-cover rounded">
              <div class="flex-grow">
                <p class="font-medium text-gray-800"><%= item.name %></p>
                <p class="text-sm text-gray-500">Qty: <%= item.quantity %></p>
              </div>
              <p class="text-gray-700 font-medium">$<%= item.total.toFixed(2) %></p>
            </div>
          <% }) %>
        </div>
        
        <div class="border-t pt-4 space-y-2">
          <div class="flex justify-between text-gray-600">
            <span>Subtotal</span>
            <span>$<%= cart.totalPrice.toFixed(2) %></span>
          </div>
          <div class="flex justify-between text-gray-600">
            <span>Shipping</span>
            <span>$0.00</span> <%# Placeholder - Add shipping calculation later %>
          </div>
          <div class="flex justify-between text-lg font-semibold text-gray-900 pt-2">
            <span>Total</span>
            <span>$<%= cart.totalPrice.toFixed(2) %></span> <%# Adjust if shipping cost added %>
          </div>
        </div>
        
        <div class="mt-6">
          <button type="submit" 
                  class="w-full bg-green-600 text-white py-3 px-4 rounded-md font-semibold hover:bg-green-700 transition duration-150 ease-in-out focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2">
            Place Order
          </button>
        </div>
        
        <p class="text-xs text-gray-500 mt-4 text-center">
          By placing your order, you agree to our 
          <a href="/terms" class="text-green-600 hover:underline">Terms of Service</a> and 
          <a href="/privacy" class="text-green-600 hover:underline">Privacy Policy</a>.
        </p>
      </div>
    </div>

  </form>
</div>

<!-- Loading Overlay -->
<div id="loading-overlay" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
  <div class="bg-white p-6 rounded-lg shadow-lg text-center">
    <div class="inline-block animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-green-600 mb-4"></div>
    <p class="text-gray-700">Processing your order...</p>
  </div>
</div>

<script src="https://js.stripe.com/v3/"></script> <%# Ensure Stripe.js is loaded %>

<%# Start: Replaced Script - Copied from stripe-test.ejs logic %>
<script>
  // Debug logger (Optional, can keep or remove for cleaner code if test passes)
  function log(message, type = 'info') {
    const logOutput = document.getElementById('log-output'); // Assumes log-output exists if using this
    if (logOutput) {
       const logEntry = document.createElement('p');
       logEntry.style.margin = '5px 0';
       if (type === 'error') logEntry.style.color = '#e53e3e';
       logEntry.textContent = `[${type.toUpperCase()}] ${message}`;
       logOutput.appendChild(logEntry);
    }
    if (type === 'error') console.error(message); else console.log(message);
  }
  
  document.addEventListener('DOMContentLoaded', async function() {
    log('Checkout page loaded, initializing Stripe...');
    
    // DOM elements for checkout page
    const form = document.getElementById('checkout-form'); // Use checkout form ID
    const submitButton = form.querySelector('button[type="submit"]'); // Get button within the checkout form
    const paymentMessage = document.getElementById('payment-message'); // Use checkout message ID
    const loadingOverlay = document.getElementById('loading-overlay'); // Overlay for checkout

    // Get Stripe parameters from server (using EJS syntax for checkout)
    const publicKey = '<%= stripePublicKey %>';
    const clientSecret = '<%= clientSecret %>';
    
    if (!publicKey || !clientSecret) {
      log('Missing Stripe configuration (public key or client secret)', 'error');
      showMessage('Payment configuration is incomplete. Please contact support.');
      return;
    }
    
    if (!form) {
        log('Checkout form not found!', 'error');
        return;
    }
     if (!submitButton) {
        log('Submit button not found in checkout form!', 'error');
        return;
    }
     if (!paymentMessage) {
        log('Payment message element not found!', 'error');
        return;
    }

    // Initialize Stripe
    let stripe;
    try {
      log(`Initializing Stripe with public key ${publicKey.substring(0, 8)}...`);
      stripe = Stripe(publicKey);
      log('Stripe initialized successfully');
    } catch (error) {
      log(`Error initializing Stripe: ${error.message}`, 'error');
      showMessage('Failed to initialize payment system. Please try again later.');
      return;
    }
    
    // Create the Elements instance (using checkout appearance)
    const appearance = {
      theme: 'stripe',
       variables: {
        colorPrimary: '#10b981', // Green color from original checkout
        colorBackground: '#ffffff',
        colorText: '#30313d',
        colorDanger: '#ef4444',
        fontFamily: 'system-ui, -apple-system, "Segoe UI", Roboto, sans-serif',
        spacingUnit: '4px',
        borderRadius: '4px'
      }
    };
    
    let elements;
    try {
      log('Creating Elements instance...');
      elements = stripe.elements({
        clientSecret,
        appearance
      });
      log('Elements instance created successfully');
    } catch (error) {
      log(`Error creating Elements: ${error.message}`, 'error');
      showMessage('Failed to create payment elements. Please try again later.');
      return;
    }
    
    // Create and mount the Payment Element
    try {
      log('Creating Payment Element...');
      const paymentElement = elements.create('payment');
      log('Payment Element created, now mounting...');
      
      const container = document.getElementById('payment-element');
      if (!container) {
        log('Payment element container (#payment-element) not found!', 'error');
        showMessage('An error occurred displaying the payment form.');
        return;
      }
      
      paymentElement.mount('#payment-element');
      log('Payment Element mounted successfully');
      
      // Listen for ready event (hides the original checkout spinner if needed)
      paymentElement.on('ready', function() {
        log('Payment Element is ready');
        // Original checkout had a #payment-loading div, removing it now
        // const loadingDiv = document.getElementById('payment-loading');
        // if (loadingDiv) loadingDiv.style.display = 'none';
      });
      
      // Listen for errors
      paymentElement.on('loaderror', function(event) {
        log(`Error loading Payment Element: ${event.error.message}`, 'error');
        showMessage(`Failed to load payment form: ${event.error.message}`);
      });
    } catch (error) {
      log(`Error with Payment Element: ${error.message}`, 'error');
      showMessage('Failed to set up payment form. Please try again later.');
      return;
    }
    
    // Show/hide error message for checkout
    function showMessage(message) {
      paymentMessage.textContent = message;
      paymentMessage.classList.remove('hidden');
    }
    
    // Handle form submission for checkout
    form.addEventListener('submit', async function(event) {
      event.preventDefault();
      
      // Show checkout loading overlay, disable button
      if (loadingOverlay) loadingOverlay.classList.remove('hidden');
      submitButton.disabled = true;
      paymentMessage.classList.add('hidden'); // Hide previous errors
      
      try {
        log('Confirming payment via checkout form...');
        const { error } = await stripe.confirmPayment({
          elements,
          confirmParams: {
            return_url: window.location.origin + '/checkout/complete' // Redirect to completion route
          }
        });
        
        if (error) {
          log(`Payment confirmation error: ${error.message}`, 'error');
          showMessage(error.message);
          
          // Hide overlay, re-enable button on error
          if (loadingOverlay) loadingOverlay.classList.add('hidden');
          submitButton.disabled = false;
        } 
        // If no error, Stripe handles the redirect to return_url
        // No 'else' block needed here typically
        
      } catch (error) {
        log(`Exception during payment confirmation: ${error.message}`, 'error');
        showMessage('A system error occurred. Please try again later.');
        
        // Hide overlay, re-enable button on exception
        if (loadingOverlay) loadingOverlay.classList.add('hidden');
        submitButton.disabled = false;
      }
    });
  });
</script>
<%# End: Replaced Script %>

<% include('./partials/footer') %> 