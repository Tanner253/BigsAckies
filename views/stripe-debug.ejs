<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Stripe Payment Element Debug</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <script src="https://js.stripe.com/v3/"></script>
</head>
<body class="bg-gray-100 min-h-screen">
  <div class="container mx-auto px-4 py-12 max-w-4xl">
    <div class="bg-white rounded-lg shadow-lg p-6">
      <div class="mb-6 border-b pb-4">
        <h1 class="text-2xl font-bold text-gray-800">Stripe Payment Element Debug</h1>
        <p class="text-gray-600">This page tests the Stripe Payment Element rendering and functionality.</p>
      </div>

      <div class="bg-blue-50 border border-blue-200 rounded p-4 mb-6">
        <h2 class="font-semibold text-blue-800">Configuration Information</h2>
        <div class="mt-2 space-y-1">
          <p>Stripe Public Key: <span id="pk-status" class="font-mono bg-gray-100 px-2 py-0.5 rounded text-sm"><%= stripePublicKey ? '✓ Available' : '✗ Missing' %></span></p>
          <p>Client Secret: <span id="cs-status" class="font-mono bg-gray-100 px-2 py-0.5 rounded text-sm"><%= clientSecret ? '✓ Available' : '✗ Missing' %></span></p>
        </div>
      </div>

      <form id="payment-form" class="space-y-6">
        <div>
          <label class="block text-gray-700 font-medium mb-2">Payment Details</label>
          <div id="payment-element" class="p-4 border border-gray-300 rounded-md bg-white min-h-[200px]">
            <!-- Stripe Payment Element will be mounted here -->
          </div>
          <div id="payment-message" class="mt-2 text-sm text-red-600"></div>
        </div>

        <div class="pt-4">
          <button type="submit" id="submit-button" class="w-full bg-green-600 text-white py-3 rounded-md font-medium hover:bg-green-700 transition">
            Test Payment
          </button>
        </div>
      </form>

      <div class="mt-8 border-t pt-4">
        <h2 class="font-semibold text-gray-800 mb-2">Debug Log</h2>
        <pre id="debug-log" class="bg-gray-100 p-4 rounded-md h-48 overflow-auto text-xs font-mono"></pre>
      </div>
    </div>
  </div>

  <script>
    // Debug logger
    const debugLog = document.getElementById('debug-log');
    function log(message, type = 'info') {
      const timestamp = new Date().toISOString().substr(11, 8);
      const entry = document.createElement('div');
      entry.className = type === 'error' ? 'text-red-600' : type === 'success' ? 'text-green-600' : '';
      entry.textContent = `[${timestamp}] ${message}`;
      debugLog.appendChild(entry);
      debugLog.scrollTop = debugLog.scrollHeight;
      console.log(`[${type}] ${message}`);
    }

    // Initialize Stripe
    document.addEventListener('DOMContentLoaded', function() {
      const stripePublicKey = '<%= stripePublicKey %>';
      const clientSecret = '<%= clientSecret %>';
      const paymentForm = document.getElementById('payment-form');
      const submitButton = document.getElementById('submit-button');
      const paymentMessage = document.getElementById('payment-message');

      log('Application initialized.');
      
      if (!stripePublicKey) {
        log('Error: Stripe public key is missing.', 'error');
        paymentMessage.textContent = 'Configuration error: Stripe public key is missing.';
        submitButton.disabled = true;
        return;
      }

      if (!clientSecret) {
        log('Error: Client secret is missing.', 'error');
        paymentMessage.textContent = 'Configuration error: Payment intent client secret is missing.';
        submitButton.disabled = true;
        return;
      }

      log(`Public key: ${stripePublicKey.substring(0, 8)}...`);
      log(`Client secret available: Yes`);

      try {
        log('Initializing Stripe...');
        const stripe = Stripe(stripePublicKey);
        
        log('Creating elements instance...');
        const elements = stripe.elements({
          clientSecret,
          appearance: {
            theme: 'stripe'
          }
        });
        
        log('Creating payment element...');
        const paymentElement = elements.create('payment');
        
        log('Mounting payment element...');
        paymentElement.mount('#payment-element');
        log('Payment element mounted successfully!', 'success');

        // Handle form submission
        paymentForm.addEventListener('submit', async function(event) {
          event.preventDefault();
          log('Payment form submitted, processing...');
          
          // Disable form while processing
          submitButton.disabled = true;
          submitButton.textContent = 'Processing...';
          
          try {
            log('Confirming payment...');
            const {error} = await stripe.confirmPayment({
              elements,
              confirmParams: {
                // Return to the same page for testing
                return_url: window.location.href,
              },
            });

            if (error) {
              log(`Payment error: ${error.message}`, 'error');
              paymentMessage.textContent = error.message;
            } else {
              log('No error but no redirect occurred. This is unusual.', 'error');
            }
          } catch(e) {
            log(`Exception: ${e.message}`, 'error');
            paymentMessage.textContent = `An unexpected error occurred: ${e.message}`;
          }
          
          submitButton.disabled = false;
          submitButton.textContent = 'Test Payment';
        });

      } catch (error) {
        log(`Initialization error: ${error.message}`, 'error');
        paymentMessage.textContent = `Error initializing Stripe: ${error.message}`;
        submitButton.disabled = true;
      }
    });

    // Handle payment success/error from URL params (after redirect)
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.has('payment_intent')) {
      const paymentIntent = urlParams.get('payment_intent');
      log(`Returned from payment flow with payment_intent: ${paymentIntent}`, 'success');
      
      if (urlParams.has('redirect_status')) {
        const status = urlParams.get('redirect_status');
        log(`Payment status: ${status}`, status === 'succeeded' ? 'success' : 'error');
      }
    }
  </script>
</body>
</html> 